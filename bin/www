#!/usr/bin/env node
import http from 'http';
import mongoose from 'mongoose';
import config from '../config/config';
import { createAdmin } from '../config/admin';
import AWS from 'aws-sdk';
const debug = require('debug')('excertlab-backend');

let dbURL = process.env.MONGODB_URL || config.mongoURL;
export const jwtSecret = process.env.JWTSECRET || config.jwtSecret;
export const expiresIn = process.env.EXPIRESIN || config.expiresIn;
export const salt = config.salt;

export const adminName = process.env.ADMIN_NAME || config.adminName;
export const adminEmail = process.env.ADMIN_EMAIL || config.adminEmail;
export const adminPassword = process.env.ADMIN_PASSWORD || config.adminPassword;
export const applicationUrl = process.env.APPLICATION_URL || config.applicationUrl;

const accessKeyId = process.env.AWS_ACCESS_KEY || config.accessKeyId;
const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY || config.secretAccessKey;
const awsRegion = process.env.AWS_REGION || config.awsRegion;
export const bucketName = process.env.BUCKET_NAME || config.bucketName;
export const awsUrl = process.env.AWS_URL || config.awsUrl;
export const s3 = new AWS.S3({ accessKeyId, secretAccessKey, region: awsRegion });

mongoose
  .connect(dbURL, {
    useNewUrlParser: true,
    useFindAndModify: false,
    useCreateIndex: true,
    poolSize: 30,
    useUnifiedTopology: true,
    socketTimeoutMS: 10000,
  }).then(async () => {
    console.log("database connected successfully");
  })

createAdmin(adminName, adminEmail, adminPassword);

/**
 * Listen on provided port, on all network interfaces.
 */
const app = require('../app');
const port = process.env.PORT || config.port;
const server = http.createServer(app);

server.listen(port, () => {
  console.log(`server started on port ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}